struct BatchResult {
    std::map<std::string, DbVector*> data;

    BatchResult(const std::vector<std::string>& col_names, uint32_t n) {
        for (const auto& name : col_names) {
            DbVector* v = new DbVector(n);
            data[name] = v;
        }
    }

    ~BatchResult() {
        for (auto& elem : data) {
            delete elem.second;
        }
    }


    uint32_t getn() {
        const auto& itr = data.begin();
        return itr->second->n;
    }

struct DbVector {
    uint32_t n;
    int32_t *col;
    uint32_t *sel;

    DbVector(uint32_t n, int32_t *col, uint32_t *sel) :
            n(n), col(col), sel(sel) {}

    ~DbVector() = default;
};



class DAGNode {
public:
    DAGNode() = default;
    virtual ~DAGNode() = default;

    virtual uint32_t compute(DbVector** res) = 0;
    virtual int getLeftChildType() = 0;
    virtual int getRightChildType() = 0;
    virtual void setLeftVector(DbVector* v) = 0;
    virtual void setRightVector(DbVector* v) = 0;
};
